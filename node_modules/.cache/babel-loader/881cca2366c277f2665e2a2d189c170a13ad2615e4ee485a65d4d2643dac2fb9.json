{"ast":null,"code":"var _jsxFileName = \"/home/mika/projects/messanger/frontend/src/components/CreateChat.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { NotificationContainer, NotificationManager } from \"react-notifications\";\nimport \"react-notifications/lib/notifications.css\";\nimport getUsers from \"../requests/getUsers.js\";\nimport getUserInfo from \"../requests/getUserInfo.js\";\nimport ChatSkeleton from \"./ChatSkeleton\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CreateChat = () => {\n  _s();\n  const [users, setUsers] = useState([]);\n  const [currentUserId, setCurrentUserId] = useState(0);\n  const [showModal, setShowModal] = useState(false);\n  const notificationRef = useRef(null);\n  const API_URL = \"http://192.168.242.67:8000/api\";\n  useEffect(() => {\n    const fetchData = async () => {\n      const users = await getUsers();\n      const currentUser = await getUserInfo();\n      const filteredUsers = users.filter(item => item.id_user !== currentUser.id_user);\n      setUsers(filteredUsers);\n      setCurrentUserId(currentUser.id_user);\n    };\n    fetchData();\n  }, []);\n  const updateChats = async () => {\n    const respChats = await fetch(API_URL).then(resp => resp.json()).then(async data => {\n      const updatedChats = await Promise.all(data.map(async item => {\n        const interlocutorInfo = await getUserInfo();\n        return {\n          ...item,\n          interlocutorName: interlocutorInfo.name,\n          interlocutorSurname: interlocutorInfo.surname,\n          lastMessage: \"Hello!\"\n        };\n      }));\n      setChats(updatedChats);\n    });\n  };\n  const onCreateChat = async (currentUserId, targetUserId) => {\n    const generateUuid = uuidv4();\n    const resp = await fetch(`${API_URL}/create_chat`, {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        chat_name: generateUuid,\n        current_id: currentUserId,\n        target_id: targetUserId\n      })\n    });\n    const data = await resp.json();\n    if (resp.status === 200) {\n      NotificationManager.success(data.success, \"Success\", 2000, () => {}, notificationRef.current);\n    } else {\n      NotificationManager.error(data.error, \"Error\", 2000, () => {}, notificationRef.current);\n    }\n    setShowModal(false);\n    return data;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"bg-zinc-300 hover:bg-zinc-500 rounded-md px-2 py-2\",\n        onClick: () => setShowModal(true),\n        children: \"Create new chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this), showModal && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fixed top-0 left-0 w-full h-full flex items-center justify-center bg-gray-500 bg-opacity-50\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white p-4 rounded-md\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-between mb-2 flex-col\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-lg font-semibold\",\n            children: \"Select a user to chat with\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"block ml-auto mr-auto bg-red-500 text-white px-2 py-2 w-2/4 cursor-pointer rounded-lg border-solid border-1 border-slate-400 hover:bg-red-600\",\n            onClick: () => setShowModal(false),\n            children: \"Close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex flex-col gap-2\",\n          children: users.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex flex-col gap-1 px-2 py-2 border-solid border border-slate-400 rounded-lg\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: [item.name, \" \", item.surname]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"text-white px-1 py-1 bg-blue-400 rounded-md hover:bg-blue-500\",\n              id: item.id_user,\n              onClick: ev => onCreateChat(currentUserId, parseInt(ev.target.id)),\n              children: \"Create chat\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 37\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(ChatSkeleton, {\n      updateChats: updateChats\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(NotificationContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this);\n};\n_s(CreateChat, \"qx5KQrO5D/rvfts0JjzF9gf2mdQ=\");\n_c = CreateChat;\nexport default CreateChat;\nvar _c;\n$RefreshReg$(_c, \"CreateChat\");","map":{"version":3,"names":["React","useEffect","useRef","useState","v4","uuidv4","NotificationContainer","NotificationManager","getUsers","getUserInfo","ChatSkeleton","jsxDEV","_jsxDEV","CreateChat","_s","users","setUsers","currentUserId","setCurrentUserId","showModal","setShowModal","notificationRef","API_URL","fetchData","currentUser","filteredUsers","filter","item","id_user","updateChats","respChats","fetch","then","resp","json","data","updatedChats","Promise","all","map","interlocutorInfo","interlocutorName","name","interlocutorSurname","surname","lastMessage","setChats","onCreateChat","targetUserId","generateUuid","method","headers","Accept","body","JSON","stringify","chat_name","current_id","target_id","status","success","current","error","children","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","index","id","ev","parseInt","target","_c","$RefreshReg$"],"sources":["/home/mika/projects/messanger/frontend/src/components/CreateChat.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { NotificationContainer, NotificationManager } from \"react-notifications\";\nimport \"react-notifications/lib/notifications.css\";\nimport getUsers from \"../requests/getUsers.js\";\nimport getUserInfo from \"../requests/getUserInfo.js\";\nimport ChatSkeleton from \"./ChatSkeleton\";\n\nconst CreateChat = () => {\n    const [users, setUsers] = useState([]);\n    const [currentUserId, setCurrentUserId] = useState(0);\n    const [showModal, setShowModal] = useState(false);\n    const notificationRef = useRef(null);\n\n    const API_URL = \"http://192.168.242.67:8000/api\";\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const users = await getUsers();\n            const currentUser = await getUserInfo();\n            const filteredUsers = users.filter(item => item.id_user !== currentUser.id_user);\n\n            setUsers(filteredUsers);\n            setCurrentUserId(currentUser.id_user);\n        };\n\n        fetchData();\n    }, []);\n\n    const updateChats = async () => {\n        const respChats = await fetch(API_URL).then(resp => resp.json()).then(async data => {\n            const updatedChats = await Promise.all(data.map(async (item) => {\n                const interlocutorInfo = await getUserInfo();\n\n                return {\n                    ...item,\n                    interlocutorName: interlocutorInfo.name,\n                    interlocutorSurname: interlocutorInfo.surname,\n                    lastMessage: \"Hello!\",\n                };\n            }));\n\n            setChats(updatedChats);\n        });\n    };\n\n    const onCreateChat = async (currentUserId, targetUserId) => {\n        const generateUuid = uuidv4();\n\n        const resp = await fetch(`${API_URL}/create_chat`, {\n            method: \"POST\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                chat_name: generateUuid,\n                current_id: currentUserId,\n                target_id: targetUserId\n            })\n        });\n\n        const data = await resp.json();\n\n        if (resp.status === 200) {\n            NotificationManager.success(data.success, \"Success\", 2000, () => { }, notificationRef.current);\n        } else {\n            NotificationManager.error(data.error, \"Error\", 2000, () => { }, notificationRef.current);\n        }\n\n        setShowModal(false);\n\n        return data;\n    };\n\n    return (\n        <div>\n            <div>\n                <button className=\"bg-zinc-300 hover:bg-zinc-500 rounded-md px-2 py-2\" onClick={() => setShowModal(true)}>Create new chat</button>\n            </div>\n            {showModal && (\n                <div className=\"fixed top-0 left-0 w-full h-full flex items-center justify-center bg-gray-500 bg-opacity-50\">\n                    <div className=\"bg-white p-4 rounded-md\">\n                        <div className=\"flex justify-between mb-2 flex-col\">\n                            <h2 className=\"text-lg font-semibold\">Select a user to chat with</h2>\n                            <button className=\"block ml-auto mr-auto bg-red-500 text-white px-2 py-2 w-2/4 cursor-pointer rounded-lg border-solid border-1 border-slate-400 hover:bg-red-600\" onClick={() => setShowModal(false)}>Close</button>\n                        </div>\n                        <div className=\"flex flex-col gap-2\">\n                            {users.map((item, index) => (\n                                <div key={index} className=\"flex flex-col gap-1 px-2 py-2 border-solid border border-slate-400 rounded-lg\">\n                                    <span>{item.name} {item.surname}</span>\n                                    <button className=\"text-white px-1 py-1 bg-blue-400 rounded-md hover:bg-blue-500\" id={item.id_user} onClick={(ev) => onCreateChat(currentUserId, parseInt(ev.target.id))}>\n                                        Create chat\n                                    </button>\n                                </div>\n                            ))}\n                        </div>\n                    </div>\n                </div>\n            )}\n            <ChatSkeleton updateChats={updateChats} />\n            <NotificationContainer />\n        </div>\n    );\n};\n\nexport default CreateChat;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}