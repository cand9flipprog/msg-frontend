[{"/home/mika/projects/messanger/frontend/src/index.js":"1","/home/mika/projects/messanger/frontend/src/App.js":"2","/home/mika/projects/messanger/frontend/src/components/Login.jsx":"3","/home/mika/projects/messanger/frontend/src/components/CreateChat.jsx":"4","/home/mika/projects/messanger/frontend/src/components/Contacts.jsx":"5","/home/mika/projects/messanger/frontend/src/components/Registration.jsx":"6","/home/mika/projects/messanger/frontend/src/components/Settings.jsx":"7","/home/mika/projects/messanger/frontend/src/components/NavBar.jsx":"8","/home/mika/projects/messanger/frontend/src/requests/getUsers.js":"9","/home/mika/projects/messanger/frontend/src/requests/getUserInfo.js":"10","/home/mika/projects/messanger/frontend/src/components/Avatar.jsx":"11","/home/mika/projects/messanger/frontend/src/components/ChatSkeleton.jsx":"12","/home/mika/projects/messanger/frontend/src/components/Chat.jsx":"13"},{"size":233,"mtime":1701392555000,"results":"14","hashOfConfig":"15"},{"size":1731,"mtime":1702297333276,"results":"16","hashOfConfig":"15"},{"size":2919,"mtime":1702287731250,"results":"17","hashOfConfig":"15"},{"size":3738,"mtime":1702297901195,"results":"18","hashOfConfig":"15"},{"size":3715,"mtime":1702289371429,"results":"19","hashOfConfig":"15"},{"size":3437,"mtime":1702287737830,"results":"20","hashOfConfig":"15"},{"size":3963,"mtime":1702296995952,"results":"21","hashOfConfig":"15"},{"size":2959,"mtime":1702297213685,"results":"22","hashOfConfig":"15"},{"size":247,"mtime":1702287706345,"results":"23","hashOfConfig":"15"},{"size":484,"mtime":1702287702007,"results":"24","hashOfConfig":"15"},{"size":253,"mtime":1700565099000,"results":"25","hashOfConfig":"15"},{"size":2281,"mtime":1702297911457,"results":"26","hashOfConfig":"15"},{"size":5351,"mtime":1702293697482,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},"kvpcn1",{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"69"},"/home/mika/projects/messanger/frontend/src/index.js",[],[],["70","71","72","73","74","75"],"/home/mika/projects/messanger/frontend/src/App.js",[],[],"/home/mika/projects/messanger/frontend/src/components/Login.jsx",[],[],"/home/mika/projects/messanger/frontend/src/components/CreateChat.jsx",[],[],"/home/mika/projects/messanger/frontend/src/components/Contacts.jsx",["76"],[],"/home/mika/projects/messanger/frontend/src/components/Registration.jsx",[],[],"/home/mika/projects/messanger/frontend/src/components/Settings.jsx",[],[],"/home/mika/projects/messanger/frontend/src/components/NavBar.jsx",["77","78"],[],"/home/mika/projects/messanger/frontend/src/requests/getUsers.js",[],[],"/home/mika/projects/messanger/frontend/src/requests/getUserInfo.js",[],[],"/home/mika/projects/messanger/frontend/src/components/Avatar.jsx",[],[],"/home/mika/projects/messanger/frontend/src/components/ChatSkeleton.jsx",["79"],[],"/home/mika/projects/messanger/frontend/src/components/Chat.jsx",["80","81"],[],"import React, { useState, useEffect, useRef } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { CiLocationArrow1 } from \"react-icons/ci\";\nimport { NotificationContainer, NotificationManager } from \"react-notifications\";\nimport \"react-notifications/lib/notifications.css\";\nimport { io } from \"socket.io-client\";\nimport getUserInfo from \"../requests/getUserInfo.js\";\n\nconst Chat = () => {\n    const { id } = useParams();\n    const [messages, setMessages] = useState([]);\n    const [socket, setSocket] = useState(null);\n    const [currentUserId, setCurrentUserId] = useState(0);\n    const [currentChatId, setCurrentChatId] = useState(0);\n    const [value, setValue] = useState(\"\");\n\n    const messagesContainerRef = useRef(null);\n    const inputRef = useRef(null);\n\n    const API_URL = \"http://192.168.242.67:8000\";\n\n    useEffect(() => {\n        const respChat = async () => {\n            const resp = await fetch(`${API_URL}/api/users/chats`);\n            const data = await resp.json();\n\n            for (const item of data) {\n                if (item.chat_name === id) {\n                    setCurrentChatId(item.id_chat);\n                }\n            }\n        };\n\n        respChat();\n    }, [id]);\n\n    useEffect(() => {\n        const respMessages = async () => {\n            const resp = await fetch(`${API_URL}/api/messages`);\n            const data = await resp.json();\n\n            const chatMessages = data.filter((item) => item.chat_id === currentChatId);\n            setMessages(chatMessages);\n\n            const currentUserInfo = await getUserInfo();\n            setCurrentUserId(currentUserInfo.id_user);\n        };\n\n        respMessages();\n    }, [currentChatId]);\n\n    useEffect(() => {\n        const newSocket = io(API_URL, { query: { chat_id: currentChatId } });\n        setSocket(newSocket);\n\n        newSocket.emit(\"join chat\", { chat_id: currentChatId });\n\n        return () => {\n            newSocket.disconnect();\n        };\n    }, [currentChatId]);\n\n    useEffect(() => {\n        if (socket) {\n            socket.on(\"chat message\", (newMessage) => {\n                setMessages((prevMessages) => [...prevMessages, newMessage]);\n            });\n\n            socket.on(\"error\", (errMsg) => {\n                NotificationManager.error(errMsg, \"Success\", 3000, () => { });\n            })\n        }\n\n        return () => {\n            if (socket) {\n                socket.off(\"chat message\");\n            }\n        };\n    }, [socket]);\n\n    useEffect(() => {\n        if (messagesContainerRef.current) {\n            messagesContainerRef.current.scrollTop = messagesContainerRef.current.scrollHeight;\n        }\n    }, [messages]);\n\n    const sendMessage = (message) => {\n        socket.emit(\"chat message\", {\n            chat_id: currentChatId,\n            user_id: currentUserId,\n            message: message,\n            message_date: new Date()\n        });\n    };\n\n    const convertDate = (date) => {\n        const [newDate, splitDate] = String(date).split(\"T\");\n        const [time, splitTime] = String(splitDate).split(\".\");\n\n        return time;\n    };\n\n    return (\n        <div className=\"flex flex-col h-screen w-full\">\n            <div className=\"flex flex-col flex-grow overflow-y-auto\" ref={messagesContainerRef}>\n                {messages.map((item, idx) => (\n                    <div key={idx} className={`${currentUserId === item.user_id ? \"text-right\" : \"text-left\"} mt-4`}>\n                        <span className={`text-white px-2 py-2 rounded-full ${currentUserId === item.user_id ? \"bg-[#0d66a1] rounded-full\" : \"bg-slate-400\"}`}>\n                            {item.message}\n                        </span>\n                        <span className=\"ml-4 mr-4\">\n                            {convertDate(item.message_date).slice(0, -3)}\n                        </span>\n                    </div>\n                ))}\n            </div>\n            <div className=\"flex gap w-full\">\n                <input\n                    ref={inputRef}\n                    type=\"text\"\n                    placeholder=\"Type a message here\"\n                    className=\"border-solid border-b-2 border-slate-400 outline-none\"\n                    value={value}\n                    onChange={(ev) => setValue(ev.target.value)}\n                    onKeyDown={(ev) => {\n                        if (ev.key === \"Enter\") {\n                            if (ev.target.value.trim() === \"\") {\n                                return;\n                            } else {\n                                sendMessage(ev.target.value);\n                                setValue(\"\");\n                                inputRef.current.focus();\n                            }\n                        }\n                    }}\n                />\n                <CiLocationArrow1\n                    className=\"w-8 h-8 px-2 bg-[#2A8BF2] rounded-full cursor-pointer\"\n                    onClick={() => {\n                        if (value.trim() === \"\") {\n                            return;\n                        } else {\n                            sendMessage(value);\n                            setValue(\"\");\n                            inputRef.current.focus();\n                        }\n                    }}\n                />\n            </div>\n            <NotificationContainer />\n        </div>\n    );\n};\n\nexport default Chat;\n",["82","83","84","85","86","87"],{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","severity":1,"message":"101","line":63,"column":47,"nodeType":"102","messageId":"103","endLine":63,"endColumn":49},{"ruleId":"104","severity":1,"message":"105","line":10,"column":12,"nodeType":"106","messageId":"107","endLine":10,"endColumn":18},{"ruleId":"104","severity":1,"message":"108","line":10,"column":20,"nodeType":"106","messageId":"107","endLine":10,"endColumn":29},{"ruleId":"104","severity":1,"message":"109","line":45,"column":25,"nodeType":"106","messageId":"107","endLine":45,"endColumn":34},{"ruleId":"104","severity":1,"message":"110","line":97,"column":16,"nodeType":"106","messageId":"107","endLine":97,"endColumn":23},{"ruleId":"104","severity":1,"message":"111","line":98,"column":22,"nodeType":"106","messageId":"107","endLine":98,"endColumn":31},{"ruleId":"88","replacedBy":"112"},{"ruleId":"90","replacedBy":"113"},{"ruleId":"92","replacedBy":"114"},{"ruleId":"94","replacedBy":"115"},{"ruleId":"96","replacedBy":"116"},{"ruleId":"98","replacedBy":"117"},"dot-location",[],"new-parens",[],"no-mixed-operators",[],"no-new-object",["118"],"no-whitespace-before-property",[],"rest-spread-spacing",[],"array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-unused-vars","'avatar' is assigned a value but never used.","Identifier","unusedVar","'setAvatar' is assigned a value but never used.","'splitDate' is assigned a value but never used.","'newDate' is assigned a value but never used.","'splitTime' is assigned a value but never used.",[],[],[],["118"],[],[],"no-object-constructor"]